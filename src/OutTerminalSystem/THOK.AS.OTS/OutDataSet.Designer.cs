//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行库版本:2.0.50727.42
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace THOK.AS.OTS {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("OutDataSet")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class OutDataSet : System.Data.DataSet {
        
        private OutDataTableDataTable tableOutDataTable;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public OutDataSet() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected OutDataSet(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["OutDataTable"] != null)) {
                    base.Tables.Add(new OutDataTableDataTable(ds.Tables["OutDataTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OutDataTableDataTable OutDataTable {
            get {
                return this.tableOutDataTable;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            OutDataSet cln = ((OutDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["OutDataTable"] != null)) {
                    base.Tables.Add(new OutDataTableDataTable(ds.Tables["OutDataTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableOutDataTable = ((OutDataTableDataTable)(base.Tables["OutDataTable"]));
            if ((initTable == true)) {
                if ((this.tableOutDataTable != null)) {
                    this.tableOutDataTable.InitVars();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "OutDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/OutDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableOutDataTable = new OutDataTableDataTable();
            base.Tables.Add(this.tableOutDataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeOutDataTable() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            OutDataSet ds = new OutDataSet();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void OutDataTableRowChangeEventHandler(object sender, OutDataTableRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class OutDataTableDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn column订单日期;
            
            private System.Data.DataColumn column批次;
            
            private System.Data.DataColumn column分拣线;
            
            private System.Data.DataColumn column线路代码;
            
            private System.Data.DataColumn column线路名称;
            
            private System.Data.DataColumn column区域代码;
            
            private System.Data.DataColumn column区域名称;
            
            private System.Data.DataColumn column1号包装机包数;
            
            private System.Data.DataColumn column2号包装机包数;
            
            private System.Data.DataColumn column总数量;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OutDataTableDataTable() {
                this.TableName = "OutDataTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OutDataTableDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected OutDataTableDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 订单日期Column {
                get {
                    return this.column订单日期;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 批次Column {
                get {
                    return this.column批次;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 分拣线Column {
                get {
                    return this.column分拣线;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 线路代码Column {
                get {
                    return this.column线路代码;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 线路名称Column {
                get {
                    return this.column线路名称;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 区域代码Column {
                get {
                    return this.column区域代码;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 区域名称Column {
                get {
                    return this.column区域名称;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn _1号包装机包数Column {
                get {
                    return this.column1号包装机包数;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn _2号包装机包数Column {
                get {
                    return this.column2号包装机包数;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 总数量Column {
                get {
                    return this.column总数量;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OutDataTableRow this[int index] {
                get {
                    return ((OutDataTableRow)(this.Rows[index]));
                }
            }
            
            public event OutDataTableRowChangeEventHandler OutDataTableRowChanging;
            
            public event OutDataTableRowChangeEventHandler OutDataTableRowChanged;
            
            public event OutDataTableRowChangeEventHandler OutDataTableRowDeleting;
            
            public event OutDataTableRowChangeEventHandler OutDataTableRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddOutDataTableRow(OutDataTableRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OutDataTableRow AddOutDataTableRow(string 订单日期, string 批次, string 分拣线, string 线路代码, string 线路名称, string 区域代码, string 区域名称, string _1号包装机包数, string _2号包装机包数, string 总数量) {
                OutDataTableRow rowOutDataTableRow = ((OutDataTableRow)(this.NewRow()));
                rowOutDataTableRow.ItemArray = new object[] {
                        订单日期,
                        批次,
                        分拣线,
                        线路代码,
                        线路名称,
                        区域代码,
                        区域名称,
                        _1号包装机包数,
                        _2号包装机包数,
                        总数量};
                this.Rows.Add(rowOutDataTableRow);
                return rowOutDataTableRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                OutDataTableDataTable cln = ((OutDataTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new OutDataTableDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.column订单日期 = base.Columns["订单日期"];
                this.column批次 = base.Columns["批次"];
                this.column分拣线 = base.Columns["分拣线"];
                this.column线路代码 = base.Columns["线路代码"];
                this.column线路名称 = base.Columns["线路名称"];
                this.column区域代码 = base.Columns["区域代码"];
                this.column区域名称 = base.Columns["区域名称"];
                this.column1号包装机包数 = base.Columns["1号包装机包数"];
                this.column2号包装机包数 = base.Columns["2号包装机包数"];
                this.column总数量 = base.Columns["总数量"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.column订单日期 = new System.Data.DataColumn("订单日期", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column订单日期);
                this.column批次 = new System.Data.DataColumn("批次", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column批次);
                this.column分拣线 = new System.Data.DataColumn("分拣线", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column分拣线);
                this.column线路代码 = new System.Data.DataColumn("线路代码", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column线路代码);
                this.column线路名称 = new System.Data.DataColumn("线路名称", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column线路名称);
                this.column区域代码 = new System.Data.DataColumn("区域代码", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column区域代码);
                this.column区域名称 = new System.Data.DataColumn("区域名称", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column区域名称);
                this.column1号包装机包数 = new System.Data.DataColumn("1号包装机包数", typeof(string), null, System.Data.MappingType.Element);
                this.column1号包装机包数.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_1号包装机包数");
                this.column1号包装机包数.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_1号包装机包数Column");
                this.column1号包装机包数.ExtendedProperties.Add("Generator_UserColumnName", "1号包装机包数");
                base.Columns.Add(this.column1号包装机包数);
                this.column2号包装机包数 = new System.Data.DataColumn("2号包装机包数", typeof(string), null, System.Data.MappingType.Element);
                this.column2号包装机包数.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_2号包装机包数");
                this.column2号包装机包数.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_2号包装机包数Column");
                this.column2号包装机包数.ExtendedProperties.Add("Generator_UserColumnName", "2号包装机包数");
                base.Columns.Add(this.column2号包装机包数);
                this.column总数量 = new System.Data.DataColumn("总数量", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column总数量);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OutDataTableRow NewOutDataTableRow() {
                return ((OutDataTableRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new OutDataTableRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(OutDataTableRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OutDataTableRowChanged != null)) {
                    this.OutDataTableRowChanged(this, new OutDataTableRowChangeEvent(((OutDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OutDataTableRowChanging != null)) {
                    this.OutDataTableRowChanging(this, new OutDataTableRowChangeEvent(((OutDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OutDataTableRowDeleted != null)) {
                    this.OutDataTableRowDeleted(this, new OutDataTableRowChangeEvent(((OutDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OutDataTableRowDeleting != null)) {
                    this.OutDataTableRowDeleting(this, new OutDataTableRowChangeEvent(((OutDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveOutDataTableRow(OutDataTableRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                OutDataSet ds = new OutDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "OutDataTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class OutDataTableRow : System.Data.DataRow {
            
            private OutDataTableDataTable tableOutDataTable;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OutDataTableRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableOutDataTable = ((OutDataTableDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 订单日期 {
                get {
                    try {
                        return ((string)(this[this.tableOutDataTable.订单日期Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“OutDataTable”中列“订单日期”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableOutDataTable.订单日期Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 批次 {
                get {
                    try {
                        return ((string)(this[this.tableOutDataTable.批次Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“OutDataTable”中列“批次”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableOutDataTable.批次Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 分拣线 {
                get {
                    try {
                        return ((string)(this[this.tableOutDataTable.分拣线Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“OutDataTable”中列“分拣线”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableOutDataTable.分拣线Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 线路代码 {
                get {
                    try {
                        return ((string)(this[this.tableOutDataTable.线路代码Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“OutDataTable”中列“线路代码”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableOutDataTable.线路代码Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 线路名称 {
                get {
                    try {
                        return ((string)(this[this.tableOutDataTable.线路名称Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“OutDataTable”中列“线路名称”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableOutDataTable.线路名称Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 区域代码 {
                get {
                    try {
                        return ((string)(this[this.tableOutDataTable.区域代码Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“OutDataTable”中列“区域代码”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableOutDataTable.区域代码Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 区域名称 {
                get {
                    try {
                        return ((string)(this[this.tableOutDataTable.区域名称Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“OutDataTable”中列“区域名称”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableOutDataTable.区域名称Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string _1号包装机包数 {
                get {
                    try {
                        return ((string)(this[this.tableOutDataTable._1号包装机包数Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“OutDataTable”中列“1号包装机包数”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableOutDataTable._1号包装机包数Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string _2号包装机包数 {
                get {
                    try {
                        return ((string)(this[this.tableOutDataTable._2号包装机包数Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“OutDataTable”中列“2号包装机包数”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableOutDataTable._2号包装机包数Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 总数量 {
                get {
                    try {
                        return ((string)(this[this.tableOutDataTable.总数量Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“OutDataTable”中列“总数量”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableOutDataTable.总数量Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is订单日期Null() {
                return this.IsNull(this.tableOutDataTable.订单日期Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set订单日期Null() {
                this[this.tableOutDataTable.订单日期Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is批次Null() {
                return this.IsNull(this.tableOutDataTable.批次Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set批次Null() {
                this[this.tableOutDataTable.批次Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is分拣线Null() {
                return this.IsNull(this.tableOutDataTable.分拣线Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set分拣线Null() {
                this[this.tableOutDataTable.分拣线Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is线路代码Null() {
                return this.IsNull(this.tableOutDataTable.线路代码Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set线路代码Null() {
                this[this.tableOutDataTable.线路代码Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is线路名称Null() {
                return this.IsNull(this.tableOutDataTable.线路名称Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set线路名称Null() {
                this[this.tableOutDataTable.线路名称Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is区域代码Null() {
                return this.IsNull(this.tableOutDataTable.区域代码Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set区域代码Null() {
                this[this.tableOutDataTable.区域代码Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is区域名称Null() {
                return this.IsNull(this.tableOutDataTable.区域名称Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set区域名称Null() {
                this[this.tableOutDataTable.区域名称Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_1号包装机包数Null() {
                return this.IsNull(this.tableOutDataTable._1号包装机包数Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_1号包装机包数Null() {
                this[this.tableOutDataTable._1号包装机包数Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_2号包装机包数Null() {
                return this.IsNull(this.tableOutDataTable._2号包装机包数Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_2号包装机包数Null() {
                this[this.tableOutDataTable._2号包装机包数Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is总数量Null() {
                return this.IsNull(this.tableOutDataTable.总数量Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set总数量Null() {
                this[this.tableOutDataTable.总数量Column] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class OutDataTableRowChangeEvent : System.EventArgs {
            
            private OutDataTableRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OutDataTableRowChangeEvent(OutDataTableRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OutDataTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591