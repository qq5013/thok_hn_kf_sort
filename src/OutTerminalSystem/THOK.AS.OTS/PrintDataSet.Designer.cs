//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行库版本:2.0.50727.42
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace THOK.AS.OTS {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("PrintDataSet")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class PrintDataSet : System.Data.DataSet {
        
        private PrintDataSetDataTable tablePrintDataSet;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public PrintDataSet() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected PrintDataSet(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["PrintDataSet"] != null)) {
                    base.Tables.Add(new PrintDataSetDataTable(ds.Tables["PrintDataSet"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PrintDataSetDataTable _PrintDataSet {
            get {
                return this.tablePrintDataSet;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            PrintDataSet cln = ((PrintDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["PrintDataSet"] != null)) {
                    base.Tables.Add(new PrintDataSetDataTable(ds.Tables["PrintDataSet"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tablePrintDataSet = ((PrintDataSetDataTable)(base.Tables["PrintDataSet"]));
            if ((initTable == true)) {
                if ((this.tablePrintDataSet != null)) {
                    this.tablePrintDataSet.InitVars();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "PrintDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/PrintDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tablePrintDataSet = new PrintDataSetDataTable();
            base.Tables.Add(this.tablePrintDataSet);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize_PrintDataSet() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            PrintDataSet ds = new PrintDataSet();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void PrintDataSetRowChangeEventHandler(object sender, PrintDataSetRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PrintDataSetDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnSORTNO;
            
            private System.Data.DataColumn columnORDERID;
            
            private System.Data.DataColumn columnCUSTOMERCODE;
            
            private System.Data.DataColumn columnCUSTOMERNAME;
            
            private System.Data.DataColumn columnCIGARETTECODE;
            
            private System.Data.DataColumn columnCIGARETTENAME;
            
            private System.Data.DataColumn columnQUANTITY;
            
            private System.Data.DataColumn columnBATCHNO;
            
            private System.Data.DataColumn columnORDERNO;
            
            private System.Data.DataColumn columnROUTECODE;
            
            private System.Data.DataColumn columnROUTENAME;
            
            private System.Data.DataColumn columnORDERDATE;
            
            private System.Data.DataColumn columnSCDATE;
            
            private System.Data.DataColumn columnLINECODE;
            
            private System.Data.DataColumn columnZZBS;
            
            private System.Data.DataColumn columnADDRESS;
            
            private System.Data.DataColumn columnCUSNO;
            
            private System.Data.DataColumn columnAREANAME;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintDataSetDataTable() {
                this.TableName = "PrintDataSet";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PrintDataSetDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PrintDataSetDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SORTNOColumn {
                get {
                    return this.columnSORTNO;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ORDERIDColumn {
                get {
                    return this.columnORDERID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CUSTOMERCODEColumn {
                get {
                    return this.columnCUSTOMERCODE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CUSTOMERNAMEColumn {
                get {
                    return this.columnCUSTOMERNAME;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CIGARETTECODEColumn {
                get {
                    return this.columnCIGARETTECODE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CIGARETTENAMEColumn {
                get {
                    return this.columnCIGARETTENAME;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn QUANTITYColumn {
                get {
                    return this.columnQUANTITY;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BATCHNOColumn {
                get {
                    return this.columnBATCHNO;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ORDERNOColumn {
                get {
                    return this.columnORDERNO;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ROUTECODEColumn {
                get {
                    return this.columnROUTECODE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ROUTENAMEColumn {
                get {
                    return this.columnROUTENAME;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ORDERDATEColumn {
                get {
                    return this.columnORDERDATE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SCDATEColumn {
                get {
                    return this.columnSCDATE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LINECODEColumn {
                get {
                    return this.columnLINECODE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ZZBSColumn {
                get {
                    return this.columnZZBS;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ADDRESSColumn {
                get {
                    return this.columnADDRESS;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CUSNOColumn {
                get {
                    return this.columnCUSNO;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AREANAMEColumn {
                get {
                    return this.columnAREANAME;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintDataSetRow this[int index] {
                get {
                    return ((PrintDataSetRow)(this.Rows[index]));
                }
            }
            
            public event PrintDataSetRowChangeEventHandler PrintDataSetRowChanging;
            
            public event PrintDataSetRowChangeEventHandler PrintDataSetRowChanged;
            
            public event PrintDataSetRowChangeEventHandler PrintDataSetRowDeleting;
            
            public event PrintDataSetRowChangeEventHandler PrintDataSetRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPrintDataSetRow(PrintDataSetRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintDataSetRow AddPrintDataSetRow(
                        string SORTNO, 
                        string ORDERID, 
                        string CUSTOMERCODE, 
                        string CUSTOMERNAME, 
                        string CIGARETTECODE, 
                        string CIGARETTENAME, 
                        string QUANTITY, 
                        string BATCHNO, 
                        string ORDERNO, 
                        string ROUTECODE, 
                        string ROUTENAME, 
                        string ORDERDATE, 
                        string SCDATE, 
                        string LINECODE, 
                        string ZZBS, 
                        string ADDRESS, 
                        string CUSNO, 
                        string AREANAME) {
                PrintDataSetRow rowPrintDataSetRow = ((PrintDataSetRow)(this.NewRow()));
                rowPrintDataSetRow.ItemArray = new object[] {
                        SORTNO,
                        ORDERID,
                        CUSTOMERCODE,
                        CUSTOMERNAME,
                        CIGARETTECODE,
                        CIGARETTENAME,
                        QUANTITY,
                        BATCHNO,
                        ORDERNO,
                        ROUTECODE,
                        ROUTENAME,
                        ORDERDATE,
                        SCDATE,
                        LINECODE,
                        ZZBS,
                        ADDRESS,
                        CUSNO,
                        AREANAME};
                this.Rows.Add(rowPrintDataSetRow);
                return rowPrintDataSetRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                PrintDataSetDataTable cln = ((PrintDataSetDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new PrintDataSetDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSORTNO = base.Columns["SORTNO"];
                this.columnORDERID = base.Columns["ORDERID"];
                this.columnCUSTOMERCODE = base.Columns["CUSTOMERCODE"];
                this.columnCUSTOMERNAME = base.Columns["CUSTOMERNAME"];
                this.columnCIGARETTECODE = base.Columns["CIGARETTECODE"];
                this.columnCIGARETTENAME = base.Columns["CIGARETTENAME"];
                this.columnQUANTITY = base.Columns["QUANTITY"];
                this.columnBATCHNO = base.Columns["BATCHNO"];
                this.columnORDERNO = base.Columns["ORDERNO"];
                this.columnROUTECODE = base.Columns["ROUTECODE"];
                this.columnROUTENAME = base.Columns["ROUTENAME"];
                this.columnORDERDATE = base.Columns["ORDERDATE"];
                this.columnSCDATE = base.Columns["SCDATE"];
                this.columnLINECODE = base.Columns["LINECODE"];
                this.columnZZBS = base.Columns["ZZBS"];
                this.columnADDRESS = base.Columns["ADDRESS"];
                this.columnCUSNO = base.Columns["CUSNO"];
                this.columnAREANAME = base.Columns["AREANAME"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSORTNO = new System.Data.DataColumn("SORTNO", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSORTNO);
                this.columnORDERID = new System.Data.DataColumn("ORDERID", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnORDERID);
                this.columnCUSTOMERCODE = new System.Data.DataColumn("CUSTOMERCODE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCUSTOMERCODE);
                this.columnCUSTOMERNAME = new System.Data.DataColumn("CUSTOMERNAME", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCUSTOMERNAME);
                this.columnCIGARETTECODE = new System.Data.DataColumn("CIGARETTECODE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCIGARETTECODE);
                this.columnCIGARETTENAME = new System.Data.DataColumn("CIGARETTENAME", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCIGARETTENAME);
                this.columnQUANTITY = new System.Data.DataColumn("QUANTITY", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnQUANTITY);
                this.columnBATCHNO = new System.Data.DataColumn("BATCHNO", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnBATCHNO);
                this.columnORDERNO = new System.Data.DataColumn("ORDERNO", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnORDERNO);
                this.columnROUTECODE = new System.Data.DataColumn("ROUTECODE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnROUTECODE);
                this.columnROUTENAME = new System.Data.DataColumn("ROUTENAME", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnROUTENAME);
                this.columnORDERDATE = new System.Data.DataColumn("ORDERDATE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnORDERDATE);
                this.columnSCDATE = new System.Data.DataColumn("SCDATE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSCDATE);
                this.columnLINECODE = new System.Data.DataColumn("LINECODE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLINECODE);
                this.columnZZBS = new System.Data.DataColumn("ZZBS", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnZZBS);
                this.columnADDRESS = new System.Data.DataColumn("ADDRESS", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnADDRESS);
                this.columnCUSNO = new System.Data.DataColumn("CUSNO", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCUSNO);
                this.columnAREANAME = new System.Data.DataColumn("AREANAME", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAREANAME);
                this.ExtendedProperties.Add("Generator_TablePropName", "_PrintDataSet");
                this.ExtendedProperties.Add("Generator_UserTableName", "PrintDataSet");
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintDataSetRow NewPrintDataSetRow() {
                return ((PrintDataSetRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new PrintDataSetRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(PrintDataSetRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PrintDataSetRowChanged != null)) {
                    this.PrintDataSetRowChanged(this, new PrintDataSetRowChangeEvent(((PrintDataSetRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PrintDataSetRowChanging != null)) {
                    this.PrintDataSetRowChanging(this, new PrintDataSetRowChangeEvent(((PrintDataSetRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PrintDataSetRowDeleted != null)) {
                    this.PrintDataSetRowDeleted(this, new PrintDataSetRowChangeEvent(((PrintDataSetRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PrintDataSetRowDeleting != null)) {
                    this.PrintDataSetRowDeleting(this, new PrintDataSetRowChangeEvent(((PrintDataSetRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePrintDataSetRow(PrintDataSetRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                PrintDataSet ds = new PrintDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PrintDataSetDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PrintDataSetRow : System.Data.DataRow {
            
            private PrintDataSetDataTable tablePrintDataSet;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PrintDataSetRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePrintDataSet = ((PrintDataSetDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SORTNO {
                get {
                    try {
                        return ((string)(this[this.tablePrintDataSet.SORTNOColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“PrintDataSet”中列“SORTNO”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablePrintDataSet.SORTNOColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ORDERID {
                get {
                    try {
                        return ((string)(this[this.tablePrintDataSet.ORDERIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“PrintDataSet”中列“ORDERID”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablePrintDataSet.ORDERIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CUSTOMERCODE {
                get {
                    try {
                        return ((string)(this[this.tablePrintDataSet.CUSTOMERCODEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“PrintDataSet”中列“CUSTOMERCODE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablePrintDataSet.CUSTOMERCODEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CUSTOMERNAME {
                get {
                    try {
                        return ((string)(this[this.tablePrintDataSet.CUSTOMERNAMEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“PrintDataSet”中列“CUSTOMERNAME”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablePrintDataSet.CUSTOMERNAMEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CIGARETTECODE {
                get {
                    try {
                        return ((string)(this[this.tablePrintDataSet.CIGARETTECODEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“PrintDataSet”中列“CIGARETTECODE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablePrintDataSet.CIGARETTECODEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CIGARETTENAME {
                get {
                    try {
                        return ((string)(this[this.tablePrintDataSet.CIGARETTENAMEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“PrintDataSet”中列“CIGARETTENAME”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablePrintDataSet.CIGARETTENAMEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string QUANTITY {
                get {
                    try {
                        return ((string)(this[this.tablePrintDataSet.QUANTITYColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“PrintDataSet”中列“QUANTITY”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablePrintDataSet.QUANTITYColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BATCHNO {
                get {
                    try {
                        return ((string)(this[this.tablePrintDataSet.BATCHNOColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“PrintDataSet”中列“BATCHNO”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablePrintDataSet.BATCHNOColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ORDERNO {
                get {
                    try {
                        return ((string)(this[this.tablePrintDataSet.ORDERNOColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“PrintDataSet”中列“ORDERNO”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablePrintDataSet.ORDERNOColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ROUTECODE {
                get {
                    try {
                        return ((string)(this[this.tablePrintDataSet.ROUTECODEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“PrintDataSet”中列“ROUTECODE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablePrintDataSet.ROUTECODEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ROUTENAME {
                get {
                    try {
                        return ((string)(this[this.tablePrintDataSet.ROUTENAMEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“PrintDataSet”中列“ROUTENAME”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablePrintDataSet.ROUTENAMEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ORDERDATE {
                get {
                    try {
                        return ((string)(this[this.tablePrintDataSet.ORDERDATEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“PrintDataSet”中列“ORDERDATE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablePrintDataSet.ORDERDATEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SCDATE {
                get {
                    try {
                        return ((string)(this[this.tablePrintDataSet.SCDATEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“PrintDataSet”中列“SCDATE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablePrintDataSet.SCDATEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LINECODE {
                get {
                    try {
                        return ((string)(this[this.tablePrintDataSet.LINECODEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“PrintDataSet”中列“LINECODE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablePrintDataSet.LINECODEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ZZBS {
                get {
                    try {
                        return ((string)(this[this.tablePrintDataSet.ZZBSColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“PrintDataSet”中列“ZZBS”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablePrintDataSet.ZZBSColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ADDRESS {
                get {
                    try {
                        return ((string)(this[this.tablePrintDataSet.ADDRESSColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“PrintDataSet”中列“ADDRESS”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablePrintDataSet.ADDRESSColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CUSNO {
                get {
                    try {
                        return ((string)(this[this.tablePrintDataSet.CUSNOColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“PrintDataSet”中列“CUSNO”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablePrintDataSet.CUSNOColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AREANAME {
                get {
                    try {
                        return ((string)(this[this.tablePrintDataSet.AREANAMEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“PrintDataSet”中列“AREANAME”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablePrintDataSet.AREANAMEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSORTNONull() {
                return this.IsNull(this.tablePrintDataSet.SORTNOColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSORTNONull() {
                this[this.tablePrintDataSet.SORTNOColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsORDERIDNull() {
                return this.IsNull(this.tablePrintDataSet.ORDERIDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetORDERIDNull() {
                this[this.tablePrintDataSet.ORDERIDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCUSTOMERCODENull() {
                return this.IsNull(this.tablePrintDataSet.CUSTOMERCODEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCUSTOMERCODENull() {
                this[this.tablePrintDataSet.CUSTOMERCODEColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCUSTOMERNAMENull() {
                return this.IsNull(this.tablePrintDataSet.CUSTOMERNAMEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCUSTOMERNAMENull() {
                this[this.tablePrintDataSet.CUSTOMERNAMEColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCIGARETTECODENull() {
                return this.IsNull(this.tablePrintDataSet.CIGARETTECODEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCIGARETTECODENull() {
                this[this.tablePrintDataSet.CIGARETTECODEColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCIGARETTENAMENull() {
                return this.IsNull(this.tablePrintDataSet.CIGARETTENAMEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCIGARETTENAMENull() {
                this[this.tablePrintDataSet.CIGARETTENAMEColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQUANTITYNull() {
                return this.IsNull(this.tablePrintDataSet.QUANTITYColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQUANTITYNull() {
                this[this.tablePrintDataSet.QUANTITYColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBATCHNONull() {
                return this.IsNull(this.tablePrintDataSet.BATCHNOColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBATCHNONull() {
                this[this.tablePrintDataSet.BATCHNOColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsORDERNONull() {
                return this.IsNull(this.tablePrintDataSet.ORDERNOColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetORDERNONull() {
                this[this.tablePrintDataSet.ORDERNOColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsROUTECODENull() {
                return this.IsNull(this.tablePrintDataSet.ROUTECODEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetROUTECODENull() {
                this[this.tablePrintDataSet.ROUTECODEColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsROUTENAMENull() {
                return this.IsNull(this.tablePrintDataSet.ROUTENAMEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetROUTENAMENull() {
                this[this.tablePrintDataSet.ROUTENAMEColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsORDERDATENull() {
                return this.IsNull(this.tablePrintDataSet.ORDERDATEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetORDERDATENull() {
                this[this.tablePrintDataSet.ORDERDATEColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSCDATENull() {
                return this.IsNull(this.tablePrintDataSet.SCDATEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSCDATENull() {
                this[this.tablePrintDataSet.SCDATEColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLINECODENull() {
                return this.IsNull(this.tablePrintDataSet.LINECODEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLINECODENull() {
                this[this.tablePrintDataSet.LINECODEColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsZZBSNull() {
                return this.IsNull(this.tablePrintDataSet.ZZBSColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetZZBSNull() {
                this[this.tablePrintDataSet.ZZBSColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsADDRESSNull() {
                return this.IsNull(this.tablePrintDataSet.ADDRESSColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetADDRESSNull() {
                this[this.tablePrintDataSet.ADDRESSColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCUSNONull() {
                return this.IsNull(this.tablePrintDataSet.CUSNOColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCUSNONull() {
                this[this.tablePrintDataSet.CUSNOColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAREANAMENull() {
                return this.IsNull(this.tablePrintDataSet.AREANAMEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAREANAMENull() {
                this[this.tablePrintDataSet.AREANAMEColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PrintDataSetRowChangeEvent : System.EventArgs {
            
            private PrintDataSetRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintDataSetRowChangeEvent(PrintDataSetRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintDataSetRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591