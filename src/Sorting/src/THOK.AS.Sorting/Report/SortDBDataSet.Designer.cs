//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.3615
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace THOK.AS.Sorting.Report {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("SortDBDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class SortDBDataSet : global::System.Data.DataSet {
        
        private 效率报表DataTable table效率报表;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SortDBDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected SortDBDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["效率报表"] != null)) {
                    base.Tables.Add(new 效率报表DataTable(ds.Tables["效率报表"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public 效率报表DataTable 效率报表 {
            get {
                return this.table效率报表;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            SortDBDataSet cln = ((SortDBDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["效率报表"] != null)) {
                    base.Tables.Add(new 效率报表DataTable(ds.Tables["效率报表"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.table效率报表 = ((效率报表DataTable)(base.Tables["效率报表"]));
            if ((initTable == true)) {
                if ((this.table效率报表 != null)) {
                    this.table效率报表.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "SortDBDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/SortDBDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.table效率报表 = new 效率报表DataTable();
            base.Tables.Add(this.table效率报表);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize效率报表() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            SortDBDataSet ds = new SortDBDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void 效率报表RowChangeEventHandler(object sender, 效率报表RowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class 效率报表DataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn column分析时间;
            
            private global::System.Data.DataColumn column总数量;
            
            private global::System.Data.DataColumn column已分拣数量;
            
            private global::System.Data.DataColumn column未分拣数量;
            
            private global::System.Data.DataColumn column分拣运行效率;
            
            private global::System.Data.DataColumn column分拣综合效率;
            
            private global::System.Data.DataColumn column整体综合效率;
            
            private global::System.Data.DataColumn column正常停机;
            
            private global::System.Data.DataColumn column正常运行;
            
            private global::System.Data.DataColumn column分拣机故障;
            
            private global::System.Data.DataColumn column立式机缺烟;
            
            private global::System.Data.DataColumn column打码机故障;
            
            private global::System.Data.DataColumn column包装机故障;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 效率报表DataTable() {
                this.TableName = "效率报表";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 效率报表DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected 效率报表DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 分析时间Column {
                get {
                    return this.column分析时间;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 总数量Column {
                get {
                    return this.column总数量;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 已分拣数量Column {
                get {
                    return this.column已分拣数量;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 未分拣数量Column {
                get {
                    return this.column未分拣数量;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 分拣运行效率Column {
                get {
                    return this.column分拣运行效率;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 分拣综合效率Column {
                get {
                    return this.column分拣综合效率;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 整体综合效率Column {
                get {
                    return this.column整体综合效率;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 正常停机Column {
                get {
                    return this.column正常停机;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 正常运行Column {
                get {
                    return this.column正常运行;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 分拣机故障Column {
                get {
                    return this.column分拣机故障;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 立式机缺烟Column {
                get {
                    return this.column立式机缺烟;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 打码机故障Column {
                get {
                    return this.column打码机故障;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 包装机故障Column {
                get {
                    return this.column包装机故障;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 效率报表Row this[int index] {
                get {
                    return ((效率报表Row)(this.Rows[index]));
                }
            }
            
            public event 效率报表RowChangeEventHandler 效率报表RowChanging;
            
            public event 效率报表RowChangeEventHandler 效率报表RowChanged;
            
            public event 效率报表RowChangeEventHandler 效率报表RowDeleting;
            
            public event 效率报表RowChangeEventHandler 效率报表RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Add效率报表Row(效率报表Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 效率报表Row Add效率报表Row(System.DateTime 分析时间, int 总数量, int 已分拣数量, int 未分拣数量, double 分拣运行效率, double 分拣综合效率, double 整体综合效率, int 正常停机, int 正常运行, int 分拣机故障, int 立式机缺烟, int 打码机故障, int 包装机故障) {
                效率报表Row row效率报表Row = ((效率报表Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        分析时间,
                        总数量,
                        已分拣数量,
                        未分拣数量,
                        分拣运行效率,
                        分拣综合效率,
                        整体综合效率,
                        正常停机,
                        正常运行,
                        分拣机故障,
                        立式机缺烟,
                        打码机故障,
                        包装机故障};
                row效率报表Row.ItemArray = columnValuesArray;
                this.Rows.Add(row效率报表Row);
                return row效率报表Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                效率报表DataTable cln = ((效率报表DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new 效率报表DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.column分析时间 = base.Columns["分析时间"];
                this.column总数量 = base.Columns["总数量"];
                this.column已分拣数量 = base.Columns["已分拣数量"];
                this.column未分拣数量 = base.Columns["未分拣数量"];
                this.column分拣运行效率 = base.Columns["分拣运行效率"];
                this.column分拣综合效率 = base.Columns["分拣综合效率"];
                this.column整体综合效率 = base.Columns["整体综合效率"];
                this.column正常停机 = base.Columns["正常停机"];
                this.column正常运行 = base.Columns["正常运行"];
                this.column分拣机故障 = base.Columns["分拣机故障"];
                this.column立式机缺烟 = base.Columns["立式机缺烟"];
                this.column打码机故障 = base.Columns["打码机故障"];
                this.column包装机故障 = base.Columns["包装机故障"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.column分析时间 = new global::System.Data.DataColumn("分析时间", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column分析时间);
                this.column总数量 = new global::System.Data.DataColumn("总数量", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column总数量);
                this.column已分拣数量 = new global::System.Data.DataColumn("已分拣数量", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column已分拣数量);
                this.column未分拣数量 = new global::System.Data.DataColumn("未分拣数量", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column未分拣数量);
                this.column分拣运行效率 = new global::System.Data.DataColumn("分拣运行效率", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column分拣运行效率);
                this.column分拣综合效率 = new global::System.Data.DataColumn("分拣综合效率", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column分拣综合效率);
                this.column整体综合效率 = new global::System.Data.DataColumn("整体综合效率", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column整体综合效率);
                this.column正常停机 = new global::System.Data.DataColumn("正常停机", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column正常停机);
                this.column正常运行 = new global::System.Data.DataColumn("正常运行", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column正常运行);
                this.column分拣机故障 = new global::System.Data.DataColumn("分拣机故障", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column分拣机故障);
                this.column立式机缺烟 = new global::System.Data.DataColumn("立式机缺烟", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column立式机缺烟);
                this.column打码机故障 = new global::System.Data.DataColumn("打码机故障", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column打码机故障);
                this.column包装机故障 = new global::System.Data.DataColumn("包装机故障", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column包装机故障);
                this.column分析时间.AllowDBNull = false;
                this.column总数量.AllowDBNull = false;
                this.column已分拣数量.AllowDBNull = false;
                this.column未分拣数量.ReadOnly = true;
                this.column分拣运行效率.AllowDBNull = false;
                this.column分拣综合效率.AllowDBNull = false;
                this.column整体综合效率.AllowDBNull = false;
                this.column正常停机.AllowDBNull = false;
                this.column正常运行.AllowDBNull = false;
                this.column分拣机故障.AllowDBNull = false;
                this.column立式机缺烟.AllowDBNull = false;
                this.column打码机故障.AllowDBNull = false;
                this.column包装机故障.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 效率报表Row New效率报表Row() {
                return ((效率报表Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new 效率报表Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(效率报表Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.效率报表RowChanged != null)) {
                    this.效率报表RowChanged(this, new 效率报表RowChangeEvent(((效率报表Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.效率报表RowChanging != null)) {
                    this.效率报表RowChanging(this, new 效率报表RowChangeEvent(((效率报表Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.效率报表RowDeleted != null)) {
                    this.效率报表RowDeleted(this, new 效率报表RowChangeEvent(((效率报表Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.效率报表RowDeleting != null)) {
                    this.效率报表RowDeleting(this, new 效率报表RowChangeEvent(((效率报表Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Remove效率报表Row(效率报表Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                SortDBDataSet ds = new SortDBDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "效率报表DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class 效率报表Row : global::System.Data.DataRow {
            
            private 效率报表DataTable table效率报表;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 效率报表Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.table效率报表 = ((效率报表DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime 分析时间 {
                get {
                    return ((global::System.DateTime)(this[this.table效率报表.分析时间Column]));
                }
                set {
                    this[this.table效率报表.分析时间Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int 总数量 {
                get {
                    return ((int)(this[this.table效率报表.总数量Column]));
                }
                set {
                    this[this.table效率报表.总数量Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int 已分拣数量 {
                get {
                    return ((int)(this[this.table效率报表.已分拣数量Column]));
                }
                set {
                    this[this.table效率报表.已分拣数量Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int 未分拣数量 {
                get {
                    try {
                        return ((int)(this[this.table效率报表.未分拣数量Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“效率报表”中列“未分拣数量”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table效率报表.未分拣数量Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double 分拣运行效率 {
                get {
                    return ((double)(this[this.table效率报表.分拣运行效率Column]));
                }
                set {
                    this[this.table效率报表.分拣运行效率Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double 分拣综合效率 {
                get {
                    return ((double)(this[this.table效率报表.分拣综合效率Column]));
                }
                set {
                    this[this.table效率报表.分拣综合效率Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double 整体综合效率 {
                get {
                    return ((double)(this[this.table效率报表.整体综合效率Column]));
                }
                set {
                    this[this.table效率报表.整体综合效率Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int 正常停机 {
                get {
                    return ((int)(this[this.table效率报表.正常停机Column]));
                }
                set {
                    this[this.table效率报表.正常停机Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int 正常运行 {
                get {
                    return ((int)(this[this.table效率报表.正常运行Column]));
                }
                set {
                    this[this.table效率报表.正常运行Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int 分拣机故障 {
                get {
                    return ((int)(this[this.table效率报表.分拣机故障Column]));
                }
                set {
                    this[this.table效率报表.分拣机故障Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int 立式机缺烟 {
                get {
                    return ((int)(this[this.table效率报表.立式机缺烟Column]));
                }
                set {
                    this[this.table效率报表.立式机缺烟Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int 打码机故障 {
                get {
                    return ((int)(this[this.table效率报表.打码机故障Column]));
                }
                set {
                    this[this.table效率报表.打码机故障Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int 包装机故障 {
                get {
                    return ((int)(this[this.table效率报表.包装机故障Column]));
                }
                set {
                    this[this.table效率报表.包装机故障Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is未分拣数量Null() {
                return this.IsNull(this.table效率报表.未分拣数量Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set未分拣数量Null() {
                this[this.table效率报表.未分拣数量Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class 效率报表RowChangeEvent : global::System.EventArgs {
            
            private 效率报表Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 效率报表RowChangeEvent(效率报表Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 效率报表Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace THOK.AS.Sorting.Report.SortDBDataSetTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class 效率报表TableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public 效率报表TableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "效率报表";
            tableMapping.ColumnMappings.Add("分析时间", "分析时间");
            tableMapping.ColumnMappings.Add("总数量", "总数量");
            tableMapping.ColumnMappings.Add("已分拣数量", "已分拣数量");
            tableMapping.ColumnMappings.Add("未分拣数量", "未分拣数量");
            tableMapping.ColumnMappings.Add("分拣运行效率", "分拣运行效率");
            tableMapping.ColumnMappings.Add("分拣综合效率", "分拣综合效率");
            tableMapping.ColumnMappings.Add("整体综合效率", "整体综合效率");
            tableMapping.ColumnMappings.Add("正常停机", "正常停机");
            tableMapping.ColumnMappings.Add("正常运行", "正常运行");
            tableMapping.ColumnMappings.Add("分拣机故障", "分拣机故障");
            tableMapping.ColumnMappings.Add("立式机缺烟", "立式机缺烟");
            tableMapping.ColumnMappings.Add("打码机故障", "打码机故障");
            tableMapping.ColumnMappings.Add("包装机故障", "包装机故障");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::THOK.AS.Sorting.Properties.Settings.Default.SortDBConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT 分析时间, 总数量, 已分拣数量, 未分拣数量, 分拣运行效率, 分拣综合效率, 整体综合效率, 正常停机, 正常运行, 分拣机故障, 立式机缺烟," +
                " 打码机故障, 包装机故障 FROM 效率报表";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(SortDBDataSet.效率报表DataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual SortDBDataSet.效率报表DataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            SortDBDataSet.效率报表DataTable dataTable = new SortDBDataSet.效率报表DataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
}

#pragma warning restore 1591